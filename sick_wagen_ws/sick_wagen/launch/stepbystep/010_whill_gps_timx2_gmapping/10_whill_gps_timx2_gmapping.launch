<?xml version="1.0" ?>
<launch>
	<!--  ublox launch file  -->
	<arg name="param_file_name" doc="name of param file, e.g. rover" default="zed_f9p_whill" />
	<arg name="param_file_dir" doc="directory to look for $(arg param_file_name).yaml" default="$(find sick_wagen)/config/ublox_gps" />
	<arg name="node_name" doc="name of this node" default="ublox" />
	<arg name="output" default="screen" />
	<arg name="respawn" default="true" />
	<arg name="respawn_delay" default="30" />
	<arg name="clear_params" default="true" />
	<arg name="device_tty" default="$(env TTY_UBLOX)" />
	<node pkg="ublox_gps" type="ublox_gps" name="$(arg node_name)" output="$(arg output)" clear_params="$(arg clear_params)" respawn="$(arg respawn)" respawn_delay="$(arg respawn_delay)">
		<rosparam command="load" file="$(arg param_file_dir)/$(arg param_file_name).yaml" />
		<param name="device" type="string" value="$(arg device_tty)"/>
		<param name="frame_id" type="string" value="gps"/>
	</node>
	<!--  robot_localization  -->
	<rosparam command="load" file="$(find sick_wagen)/config/robot_localization/rover_amcl.yaml" />
	<node pkg="robot_localization" type="ekf_localization_node" name="ekf_se_map" clear_params="true">
		<remap from="odometry/filtered" to="odometry/filtered_map"/>
	</node>
	<!-- x[m] y[m] z[m] yaw(z)[rad] pitch(y)[rad] roll(x)[rad] -->
	<node pkg="tf" type="static_transform_publisher" name="stp_gps_frame" args="0 0 1.03 0 0 0 base_link gps 100" />
	<node pkg="robot_localization" type="navsat_transform_node" name="navsat_transform" clear_params="true">
		<remap from="odometry/filtered" to="odometry/filtered_map"/>
		<remap from="gps/fix" to="ublox/fix"/>
	</node>
	<group ns="tim_scans">
		<node name="sick_tim_R" pkg="sick_scan" type="sick_generic_caller" respawn="false" output="screen">
			<param name="scanner_type" type="string" value="sick_tim_5xx" />
			<!-- -135째 -->
			<param name="min_ang" type="double" value="-1.832595715" />
			<!-- 135째 -->
			<param name="max_ang" type="double" value="1.832595715" />
			<param name="use_binary_protocol" type="bool" value="true" />
			<param name="range_max" type="double" value="100.0" />
			<param name="intensity" type="bool" value="True" />
			<param name="hostname" type="string" value="TIM_RIGHT_IP" />
			<param name="cloud_topic" type="string" value="tim_cloud_R" />
			<param name="frame_id" type="str" value="tim_link_R" />
			<param name="port" type="string" value="2112" />
			<param name="timelimit" type="int" value="5" />
			<param name="sw_pll_only_publish" type="bool" value="true" />
			<param name="min_intensity" type="double" value="0.0" />
			<!-- Set range of LaserScan messages to infinity, if intensity < min_intensity (default: 0) -->
			<!-- if you use sick_scan (old library)-->
			<!-- <remap from="scan" to="tim_scan_R"/> -->
			<!-- if you use sick_scan_xd (new library) -->
			<remap from="/sick_tim_5xx/scan" to="tim_scan_R" />
		</node>
		<!-- x[m] y[m] z[m] yaw(z)[rad] pitch(y)[rad] roll(x)[rad] -->
		<node pkg="tf" type="static_transform_publisher" name="stp_tim_R_frame" args="0.83 -0.31 0 -0.785398 0 0 base_link tim_link_R 100" />
		<node name="sick_tim_L" pkg="sick_scan" type="sick_generic_caller" respawn="false" output="screen">
			<param name="scanner_type" type="string" value="sick_tim_5xx" />
			<!-- -135째 -->
			<param name="min_ang" type="double" value="-1.832595715" />
			<!-- 135째 -->
			<param name="max_ang" type="double" value="1.832595715" />
			<param name="use_binary_protocol" type="bool" value="true" />
			<param name="range_max" type="double" value="100.0" />
			<param name="intensity" type="bool" value="True" />
			<param name="hostname" type="string" value="TIM_LEFT_IP" />
			<param name="cloud_topic" type="string" value="tim_cloud_L" />
			<param name="frame_id" type="str" value="tim_link_L" />
			<param name="port" type="string" value="2112" />
			<param name="timelimit" type="int" value="5" />
			<param name="sw_pll_only_publish" type="bool" value="true" />
			<param name="min_intensity" type="double" value="0.0" />
			<!-- Set range of LaserScan messages to infinity, if intensity < min_intensity (default: 0) -->
			<!-- if you use sick_scan (old library)-->
			<!-- <remap from="scan" to="tim_scan_L"/> -->
			<!-- if you use sick_scan_xd (new library) -->
			<remap from="/sick_tim_5xx/scan" to="tim_scan_L" />
		</node>
		<!-- x[m] y[m] z[m] yaw(z)[rad] pitch(y)[rad] roll(x)[rad] -->
		<node pkg="tf" type="static_transform_publisher" name="stp_tim_L_frame" args="0.83 0.31 0 0.785398 0 0 base_link tim_link_L 100" />

	</group>
	<arg name="node_start_delay" default="5.0" />
	<node pkg="ira_laser_tools" name="laserscan_multi_merger" type="laserscan_multi_merger" output="screen" launch-prefix="bash -c 'sleep $(arg node_start_delay); $0 $@'">
		<param name="destination_frame" value="laser_link" />
		<param name="cloud_destination_topic" value="/merged_cloud" />
		<param name="scan_destination_topic" value="/tim_scan" />
		<param name="laserscan_topics" value="/tim_scans/tim_scan_R /tim_scans/tim_scan_L" />
		<!-- LIST OF THE LASER SCAN TOPICS TO SUBSCRIBE -->
		<param name="angle_min" value="-3.14159265" />
		<param name="angle_max" value="3.14159265" />
		<param name="angle_increment" value="0.004363323" />
		<param name="scan_time" value="0.02" />
		<param name="range_min" value="0.2" />
		<param name="range_max" value="60.0" />
	</node>
	<!-- x[m] y[m] z[m] yaw(z)[rad] pitch(y)[rad] roll(x)[rad] -->
	<node pkg="tf" type="static_transform_publisher" name="stp_laser_frame" args="0.83 0 0 0 0 0 base_link laser_link 100" />
	<arg name="xacro_file" default="$(env SICK_WAGEN_XACRO)"/>
	<param name="robot_description" command="$(find xacro)/xacro $(find sick_wagen)/xacro/$(arg xacro_file)"/>
	<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher">
		<remap from="/joint_states" to="/whill/states/jointState" />
	</node>
	<node pkg="ros_whill" type="ros_whill" name="whill" output="screen">
		<rosparam file="$(find ros_whill)/params/initial_speedprofile.yaml" command="load" />
		<param name="keep_connected" value="true" />
		<!-- Serial Device name -->
		<param name="serialport" value="/dev/ttyUSB-WHILL"/>
		<!-- Output Odometry tf or not. If other node publishes odom->base_link tf, Change value to "false" -->
		<param name="publish_tf" value="true"/>
	</node>
	<!-- gmapping -->
	<node pkg="gmapping" type="slam_gmapping" name="slam_gmapping" clear_params="true">
		<param name="map_update_interval" value="1.0" />
		<param name="temporalUpdate" value="1.0" />
		<param name="base_frame" value="base_link"/>
		<param name="odom_frame" value="odom"/>
		<param name="maxUrange" value="30.0" type="double" />
		<param name="delta" value="0.05" />
		<param name="xmax" value="50" type="double" />
		<param name="ymax" value="50" type="double" />
		<param name="xmin" value="-50" type="double" />
		<param name="ymin" value="-50" type="double" />
		<remap from="scan" to="tim_scan"/>
		<param name="base_frame" value="base_link" />
		<param name="odom_frame" value="odom" />
		<param name="map_frame" value="map" />
	</node>

	<node name="wagen_controller" pkg="sick_wagen" type="wagen_controller" output="screen">
		<remap from="cmd_vel" to="/whill/controller/cmd_vel"/>
	</node>

	<node name="joy_node" pkg="joy" type="joy_node" args="_dev:=/dev/input/js0"/>
	<node pkg="rviz" type="rviz" name="rviz" required="true" args="-d $(find sick_wagen)/launch/stepbystep/010_whill_gps_timx2_gmapping/10_whill_gps_timx2_gmapping.rviz"/>
</launch>
